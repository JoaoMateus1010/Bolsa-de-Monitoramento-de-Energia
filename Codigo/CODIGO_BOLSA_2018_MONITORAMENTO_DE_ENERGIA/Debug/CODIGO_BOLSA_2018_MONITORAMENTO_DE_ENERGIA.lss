
CODIGO_BOLSA_2018_MONITORAMENTO_DE_ENERGIA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000592  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  0000062a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b30  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087b  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e9  00000000  00000000  000026f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e9       	ldi	r30, 0x92	; 146
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 c7 02 	jmp	0x58e	; 0x58e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
 * Instituição: UNIVERSIDADE FEDERAL DO CEARÁ
 * QUIXADÁ
 */
#include "ADC.h"
void init_ADC(){
	ADMUX  = 0b11000000;
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10000111;
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b00000000;
  b2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  b6:	08 95       	ret

000000b8 <Read_ADC>:
}
unsigned int Read_ADC(unsigned int PIN_ADC_ANALOG){
	int Valor_da_leitura = 0;	
	ADMUX  = PIN_ADC_ANALOG;
  b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){/*CONVERTENDO*/}
  c6:	80 81       	ld	r24, Z
  c8:	86 fd       	sbrc	r24, 6
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <Read_ADC+0xe>
	Valor_da_leitura = ADC;
  cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return Valor_da_leitura;
}
  d4:	08 95       	ret

000000d6 <init_board>:
#include "DEFINES.h"
void init_board(void){
	/************************************************************************/
	/* DEFINIÇÃO PARA O TC1 PARA A LEITURA DO AD                            */
	/************************************************************************/
	TCCR1A = 0b00000001;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00000101;
  dc:	95 e0       	ldi	r25, 0x05	; 5
  de:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1C = 0b00000000;
  e2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	TIMSK1 = 0b00000001;
  e6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	/************************************************************************/
	/* HABILITAR INTERRUPÇÕES DO SISTEMA                                    */
	/************************************************************************/
	SREG = 0b10000000;
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	8f bf       	out	0x3f, r24	; 63
  ee:	08 95       	ret

000000f0 <main>:
unsigned long int Corrente_medida = 0;
unsigned int ADC_LIDO = 0;
unsigned int media_corrente = 0;
unsigned int count=0;
int main(void){  
	init_board();
  f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <init_board>
	init_ADC();
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART();  
  f8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_USART>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xc>

000000fe <__vector_13>:
    while (TRUE){	
			
    }
	return 0;
}
ISR(TIMER1_OVF_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	ADC_LIDO = Read_ADC(ADC3);
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 5c 00 	call	0xb8	; 0xb8 <Read_ADC>
 128:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_LIDO+0x1>
 12c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_LIDO>
	Corrente_medida = ADC_LIDO;
	Corrente_medida /=11;
 130:	bc 01       	movw	r22, r24
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	2b e0       	ldi	r18, 0x0B	; 11
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 96 02 	call	0x52c	; 0x52c <__udivmodsi4>
 142:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <Corrente_medida>
 146:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <Corrente_medida+0x1>
 14a:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <Corrente_medida+0x2>
 14e:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <Corrente_medida+0x3>
	media_corrente += Corrente_medida;		
 152:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <media_corrente>
 156:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <media_corrente+0x1>
 15a:	62 0f       	add	r22, r18
 15c:	73 1f       	adc	r23, r19
 15e:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <media_corrente+0x1>
 162:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <media_corrente>
	count++;	
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 16a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 174:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	if(count==40){
 178:	88 97       	sbiw	r24, 0x28	; 40
 17a:	e1 f4       	brne	.+56     	; 0x1b4 <__vector_13+0xb6>
		USART_printf_int(media_corrente/40);
 17c:	9b 01       	movw	r18, r22
 17e:	ad ec       	ldi	r26, 0xCD	; 205
 180:	bc ec       	ldi	r27, 0xCC	; 204
 182:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	92 95       	swap	r25
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	89 27       	eor	r24, r25
 192:	9f 70       	andi	r25, 0x0F	; 15
 194:	89 27       	eor	r24, r25
 196:	0e 94 21 01 	call	0x242	; 0x242 <USART_printf_int>
		USART_printfln(" A");
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 0f 01 	call	0x21e	; 0x21e <USART_printfln>
		media_corrente=0;
 1a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <media_corrente+0x1>
 1a6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <media_corrente>
		count=0;
 1aa:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <__vector_13+0xc2>
	}else{
		media_corrente +=Corrente_medida;		
 1b4:	26 0f       	add	r18, r22
 1b6:	37 1f       	adc	r19, r23
 1b8:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <media_corrente+0x1>
 1bc:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <media_corrente>
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_18>:
ISR(USART_RX_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
	
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <init_USART>:
void USART_printf(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
		USART_Transmit(String[i]);
	}
}
 1f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1fa:	87 e6       	ldi	r24, 0x67	; 103
 1fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 200:	88 e9       	ldi	r24, 0x98	; 152
 202:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 206:	8e e0       	ldi	r24, 0x0E	; 14
 208:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 20c:	08 95       	ret

0000020e <USART_Transmit>:
 20e:	e0 ec       	ldi	r30, 0xC0	; 192
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	90 81       	ld	r25, Z
 214:	95 ff       	sbrs	r25, 5
 216:	fd cf       	rjmp	.-6      	; 0x212 <USART_Transmit+0x4>
 218:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 21c:	08 95       	ret

0000021e <USART_printfln>:
void USART_printfln(unsigned char *String){
 21e:	cf 93       	push	r28
 220:	df 93       	push	r29
 222:	ec 01       	movw	r28, r24
	int i=0;
	for(i=0;String[i]!=0;i++){
 224:	88 81       	ld	r24, Y
 226:	88 23       	and	r24, r24
 228:	31 f0       	breq	.+12     	; 0x236 <USART_printfln+0x18>
 22a:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(String[i]);
 22c:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
		USART_Transmit(String[i]);
	}
}
void USART_printfln(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
 230:	89 91       	ld	r24, Y+
 232:	81 11       	cpse	r24, r1
 234:	fb cf       	rjmp	.-10     	; 0x22c <USART_printfln+0xe>
		USART_Transmit(String[i]);
	}
	USART_Transmit(0x0D);
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <USART_printf_int>:
void USART_printf_int(unsigned int Valor){
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
		switch(Valor){
 250:	84 36       	cpi	r24, 0x64	; 100
 252:	91 05       	cpc	r25, r1
 254:	20 f4       	brcc	.+8      	; 0x25e <USART_printf_int+0x1c>
 256:	8a 30       	cpi	r24, 0x0A	; 10
 258:	91 05       	cpc	r25, r1
 25a:	60 f0       	brcs	.+24     	; 0x274 <USART_printf_int+0x32>
 25c:	58 c0       	rjmp	.+176    	; 0x30e <USART_printf_int+0xcc>
 25e:	88 3e       	cpi	r24, 0xE8	; 232
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	92 07       	cpc	r25, r18
 264:	08 f4       	brcc	.+2      	; 0x268 <USART_printf_int+0x26>
 266:	a6 c0       	rjmp	.+332    	; 0x3b4 <USART_printf_int+0x172>
 268:	80 31       	cpi	r24, 0x10	; 16
 26a:	37 e2       	ldi	r19, 0x27	; 39
 26c:	93 07       	cpc	r25, r19
 26e:	08 f4       	brcc	.+2      	; 0x272 <USART_printf_int+0x30>
 270:	fc c0       	rjmp	.+504    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 272:	55 c1       	rjmp	.+682    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			case 0 ... 9:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 274:	9c 01       	movw	r18, r24
 276:	36 95       	lsr	r19
 278:	27 95       	ror	r18
 27a:	36 95       	lsr	r19
 27c:	27 95       	ror	r18
 27e:	36 95       	lsr	r19
 280:	27 95       	ror	r18
 282:	a5 ec       	ldi	r26, 0xC5	; 197
 284:	b0 e2       	ldi	r27, 0x20	; 32
 286:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 28a:	92 95       	swap	r25
 28c:	82 95       	swap	r24
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	89 27       	eor	r24, r25
 292:	9f 70       	andi	r25, 0x0F	; 15
 294:	89 27       	eor	r24, r25
 296:	48 ee       	ldi	r20, 0xE8	; 232
 298:	53 e0       	ldi	r21, 0x03	; 3
 29a:	84 9f       	mul	r24, r20
 29c:	90 01       	movw	r18, r0
 29e:	85 9f       	mul	r24, r21
 2a0:	30 0d       	add	r19, r0
 2a2:	94 9f       	mul	r25, r20
 2a4:	30 0d       	add	r19, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	c2 1b       	sub	r28, r18
 2aa:	d3 0b       	sbc	r29, r19
 2ac:	9e 01       	movw	r18, r28
 2ae:	36 95       	lsr	r19
 2b0:	27 95       	ror	r18
 2b2:	36 95       	lsr	r19
 2b4:	27 95       	ror	r18
 2b6:	ab e7       	ldi	r26, 0x7B	; 123
 2b8:	b4 e1       	ldi	r27, 0x14	; 20
 2ba:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	44 e6       	ldi	r20, 0x64	; 100
 2c4:	48 9f       	mul	r20, r24
 2c6:	90 01       	movw	r18, r0
 2c8:	49 9f       	mul	r20, r25
 2ca:	30 0d       	add	r19, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	c2 1b       	sub	r28, r18
 2d0:	d3 0b       	sbc	r29, r19
 2d2:	9e 01       	movw	r18, r28
 2d4:	ad ec       	ldi	r26, 0xCD	; 205
 2d6:	bc ec       	ldi	r27, 0xCC	; 204
 2d8:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	9c 01       	movw	r18, r24
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	82 0f       	add	r24, r18
 2fc:	93 1f       	adc	r25, r19
 2fe:	9e 01       	movw	r18, r28
 300:	28 1b       	sub	r18, r24
 302:	39 0b       	sbc	r19, r25
 304:	c9 01       	movw	r24, r18
 306:	80 5d       	subi	r24, 0xD0	; 208
 308:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			break;
 30c:	08 c1       	rjmp	.+528    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			case 10 ... 99:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 30e:	9c 01       	movw	r18, r24
 310:	36 95       	lsr	r19
 312:	27 95       	ror	r18
 314:	36 95       	lsr	r19
 316:	27 95       	ror	r18
 318:	36 95       	lsr	r19
 31a:	27 95       	ror	r18
 31c:	a5 ec       	ldi	r26, 0xC5	; 197
 31e:	b0 e2       	ldi	r27, 0x20	; 32
 320:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 324:	92 95       	swap	r25
 326:	82 95       	swap	r24
 328:	8f 70       	andi	r24, 0x0F	; 15
 32a:	89 27       	eor	r24, r25
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	89 27       	eor	r24, r25
 330:	48 ee       	ldi	r20, 0xE8	; 232
 332:	53 e0       	ldi	r21, 0x03	; 3
 334:	84 9f       	mul	r24, r20
 336:	90 01       	movw	r18, r0
 338:	85 9f       	mul	r24, r21
 33a:	30 0d       	add	r19, r0
 33c:	94 9f       	mul	r25, r20
 33e:	30 0d       	add	r19, r0
 340:	11 24       	eor	r1, r1
 342:	c2 1b       	sub	r28, r18
 344:	d3 0b       	sbc	r29, r19
 346:	9e 01       	movw	r18, r28
 348:	36 95       	lsr	r19
 34a:	27 95       	ror	r18
 34c:	36 95       	lsr	r19
 34e:	27 95       	ror	r18
 350:	ab e7       	ldi	r26, 0x7B	; 123
 352:	b4 e1       	ldi	r27, 0x14	; 20
 354:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 358:	8c 01       	movw	r16, r24
 35a:	16 95       	lsr	r17
 35c:	07 95       	ror	r16
 35e:	24 e6       	ldi	r18, 0x64	; 100
 360:	20 9f       	mul	r18, r16
 362:	c0 01       	movw	r24, r0
 364:	21 9f       	mul	r18, r17
 366:	90 0d       	add	r25, r0
 368:	11 24       	eor	r1, r1
 36a:	8e 01       	movw	r16, r28
 36c:	08 1b       	sub	r16, r24
 36e:	19 0b       	sbc	r17, r25
 370:	98 01       	movw	r18, r16
 372:	ad ec       	ldi	r26, 0xCD	; 205
 374:	bc ec       	ldi	r27, 0xCC	; 204
 376:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 37a:	ec 01       	movw	r28, r24
 37c:	d6 95       	lsr	r29
 37e:	c7 95       	ror	r28
 380:	d6 95       	lsr	r29
 382:	c7 95       	ror	r28
 384:	d6 95       	lsr	r29
 386:	c7 95       	ror	r28
 388:	8c 2f       	mov	r24, r28
 38a:	80 5d       	subi	r24, 0xD0	; 208
 38c:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 390:	ce 01       	movw	r24, r28
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	cc 0f       	add	r28, r28
 398:	dd 1f       	adc	r29, r29
 39a:	cc 0f       	add	r28, r28
 39c:	dd 1f       	adc	r29, r29
 39e:	cc 0f       	add	r28, r28
 3a0:	dd 1f       	adc	r29, r29
 3a2:	c8 0f       	add	r28, r24
 3a4:	d9 1f       	adc	r29, r25
 3a6:	c8 01       	movw	r24, r16
 3a8:	8c 1b       	sub	r24, r28
 3aa:	9d 0b       	sbc	r25, r29
 3ac:	80 5d       	subi	r24, 0xD0	; 208
 3ae:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			break;
 3b2:	b5 c0       	rjmp	.+362    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			
			case 100 ... 999:
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 3b4:	9c 01       	movw	r18, r24
 3b6:	36 95       	lsr	r19
 3b8:	27 95       	ror	r18
 3ba:	36 95       	lsr	r19
 3bc:	27 95       	ror	r18
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	a5 ec       	ldi	r26, 0xC5	; 197
 3c4:	b0 e2       	ldi	r27, 0x20	; 32
 3c6:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 3ca:	7c 01       	movw	r14, r24
 3cc:	f6 94       	lsr	r15
 3ce:	e7 94       	ror	r14
 3d0:	f6 94       	lsr	r15
 3d2:	e7 94       	ror	r14
 3d4:	f6 94       	lsr	r15
 3d6:	e7 94       	ror	r14
 3d8:	f6 94       	lsr	r15
 3da:	e7 94       	ror	r14
 3dc:	28 ee       	ldi	r18, 0xE8	; 232
 3de:	33 e0       	ldi	r19, 0x03	; 3
 3e0:	e2 9e       	mul	r14, r18
 3e2:	c0 01       	movw	r24, r0
 3e4:	e3 9e       	mul	r14, r19
 3e6:	90 0d       	add	r25, r0
 3e8:	f2 9e       	mul	r15, r18
 3ea:	90 0d       	add	r25, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	7e 01       	movw	r14, r28
 3f0:	e8 1a       	sub	r14, r24
 3f2:	f9 0a       	sbc	r15, r25
 3f4:	97 01       	movw	r18, r14
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	36 95       	lsr	r19
 3fc:	27 95       	ror	r18
 3fe:	ab e7       	ldi	r26, 0x7B	; 123
 400:	b4 e1       	ldi	r27, 0x14	; 20
 402:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 406:	8c 01       	movw	r16, r24
 408:	16 95       	lsr	r17
 40a:	07 95       	ror	r16
 40c:	80 e3       	ldi	r24, 0x30	; 48
 40e:	80 0f       	add	r24, r16
 410:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 414:	24 e6       	ldi	r18, 0x64	; 100
 416:	20 9f       	mul	r18, r16
 418:	c0 01       	movw	r24, r0
 41a:	21 9f       	mul	r18, r17
 41c:	90 0d       	add	r25, r0
 41e:	11 24       	eor	r1, r1
 420:	e7 01       	movw	r28, r14
 422:	c8 1b       	sub	r28, r24
 424:	d9 0b       	sbc	r29, r25
 426:	9e 01       	movw	r18, r28
 428:	ad ec       	ldi	r26, 0xCD	; 205
 42a:	bc ec       	ldi	r27, 0xCC	; 204
 42c:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 430:	8c 01       	movw	r16, r24
 432:	16 95       	lsr	r17
 434:	07 95       	ror	r16
 436:	16 95       	lsr	r17
 438:	07 95       	ror	r16
 43a:	16 95       	lsr	r17
 43c:	07 95       	ror	r16
 43e:	80 e3       	ldi	r24, 0x30	; 48
 440:	80 0f       	add	r24, r16
 442:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 446:	c8 01       	movw	r24, r16
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	00 0f       	add	r16, r16
 44e:	11 1f       	adc	r17, r17
 450:	00 0f       	add	r16, r16
 452:	11 1f       	adc	r17, r17
 454:	00 0f       	add	r16, r16
 456:	11 1f       	adc	r17, r17
 458:	08 0f       	add	r16, r24
 45a:	19 1f       	adc	r17, r25
 45c:	ce 01       	movw	r24, r28
 45e:	80 1b       	sub	r24, r16
 460:	91 0b       	sbc	r25, r17
 462:	80 5d       	subi	r24, 0xD0	; 208
 464:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			break;
 468:	5a c0       	rjmp	.+180    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			
			case 1000 ... 9999:
			USART_Transmit(Valor/1000 + '0');
 46a:	9c 01       	movw	r18, r24
 46c:	36 95       	lsr	r19
 46e:	27 95       	ror	r18
 470:	36 95       	lsr	r19
 472:	27 95       	ror	r18
 474:	36 95       	lsr	r19
 476:	27 95       	ror	r18
 478:	a5 ec       	ldi	r26, 0xC5	; 197
 47a:	b0 e2       	ldi	r27, 0x20	; 32
 47c:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 480:	8c 01       	movw	r16, r24
 482:	12 95       	swap	r17
 484:	02 95       	swap	r16
 486:	0f 70       	andi	r16, 0x0F	; 15
 488:	01 27       	eor	r16, r17
 48a:	1f 70       	andi	r17, 0x0F	; 15
 48c:	01 27       	eor	r16, r17
 48e:	80 e3       	ldi	r24, 0x30	; 48
 490:	80 0f       	add	r24, r16
 492:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 496:	28 ee       	ldi	r18, 0xE8	; 232
 498:	33 e0       	ldi	r19, 0x03	; 3
 49a:	02 9f       	mul	r16, r18
 49c:	c0 01       	movw	r24, r0
 49e:	03 9f       	mul	r16, r19
 4a0:	90 0d       	add	r25, r0
 4a2:	12 9f       	mul	r17, r18
 4a4:	90 0d       	add	r25, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	c8 1b       	sub	r28, r24
 4aa:	d9 0b       	sbc	r29, r25
 4ac:	9e 01       	movw	r18, r28
 4ae:	36 95       	lsr	r19
 4b0:	27 95       	ror	r18
 4b2:	36 95       	lsr	r19
 4b4:	27 95       	ror	r18
 4b6:	ab e7       	ldi	r26, 0x7B	; 123
 4b8:	b4 e1       	ldi	r27, 0x14	; 20
 4ba:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 4be:	8c 01       	movw	r16, r24
 4c0:	16 95       	lsr	r17
 4c2:	07 95       	ror	r16
 4c4:	80 e3       	ldi	r24, 0x30	; 48
 4c6:	80 0f       	add	r24, r16
 4c8:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 4cc:	24 e6       	ldi	r18, 0x64	; 100
 4ce:	20 9f       	mul	r18, r16
 4d0:	c0 01       	movw	r24, r0
 4d2:	21 9f       	mul	r18, r17
 4d4:	90 0d       	add	r25, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	c8 1b       	sub	r28, r24
 4da:	d9 0b       	sbc	r29, r25
 4dc:	9e 01       	movw	r18, r28
 4de:	ad ec       	ldi	r26, 0xCD	; 205
 4e0:	bc ec       	ldi	r27, 0xCC	; 204
 4e2:	0e 94 b8 02 	call	0x570	; 0x570 <__umulhisi3>
 4e6:	8c 01       	movw	r16, r24
 4e8:	16 95       	lsr	r17
 4ea:	07 95       	ror	r16
 4ec:	16 95       	lsr	r17
 4ee:	07 95       	ror	r16
 4f0:	16 95       	lsr	r17
 4f2:	07 95       	ror	r16
 4f4:	80 e3       	ldi	r24, 0x30	; 48
 4f6:	80 0f       	add	r24, r16
 4f8:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 4fc:	c8 01       	movw	r24, r16
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	00 0f       	add	r16, r16
 504:	11 1f       	adc	r17, r17
 506:	00 0f       	add	r16, r16
 508:	11 1f       	adc	r17, r17
 50a:	00 0f       	add	r16, r16
 50c:	11 1f       	adc	r17, r17
 50e:	08 0f       	add	r16, r24
 510:	19 1f       	adc	r17, r25
 512:	ce 01       	movw	r24, r28
 514:	80 1b       	sub	r24, r16
 516:	91 0b       	sbc	r25, r17
 518:	80 5d       	subi	r24, 0xD0	; 208
 51a:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Transmit>
			break;
		}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	08 95       	ret

0000052c <__udivmodsi4>:
 52c:	a1 e2       	ldi	r26, 0x21	; 33
 52e:	1a 2e       	mov	r1, r26
 530:	aa 1b       	sub	r26, r26
 532:	bb 1b       	sub	r27, r27
 534:	fd 01       	movw	r30, r26
 536:	0d c0       	rjmp	.+26     	; 0x552 <__udivmodsi4_ep>

00000538 <__udivmodsi4_loop>:
 538:	aa 1f       	adc	r26, r26
 53a:	bb 1f       	adc	r27, r27
 53c:	ee 1f       	adc	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	a2 17       	cp	r26, r18
 542:	b3 07       	cpc	r27, r19
 544:	e4 07       	cpc	r30, r20
 546:	f5 07       	cpc	r31, r21
 548:	20 f0       	brcs	.+8      	; 0x552 <__udivmodsi4_ep>
 54a:	a2 1b       	sub	r26, r18
 54c:	b3 0b       	sbc	r27, r19
 54e:	e4 0b       	sbc	r30, r20
 550:	f5 0b       	sbc	r31, r21

00000552 <__udivmodsi4_ep>:
 552:	66 1f       	adc	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	1a 94       	dec	r1
 55c:	69 f7       	brne	.-38     	; 0x538 <__udivmodsi4_loop>
 55e:	60 95       	com	r22
 560:	70 95       	com	r23
 562:	80 95       	com	r24
 564:	90 95       	com	r25
 566:	9b 01       	movw	r18, r22
 568:	ac 01       	movw	r20, r24
 56a:	bd 01       	movw	r22, r26
 56c:	cf 01       	movw	r24, r30
 56e:	08 95       	ret

00000570 <__umulhisi3>:
 570:	a2 9f       	mul	r26, r18
 572:	b0 01       	movw	r22, r0
 574:	b3 9f       	mul	r27, r19
 576:	c0 01       	movw	r24, r0
 578:	a3 9f       	mul	r26, r19
 57a:	70 0d       	add	r23, r0
 57c:	81 1d       	adc	r24, r1
 57e:	11 24       	eor	r1, r1
 580:	91 1d       	adc	r25, r1
 582:	b2 9f       	mul	r27, r18
 584:	70 0d       	add	r23, r0
 586:	81 1d       	adc	r24, r1
 588:	11 24       	eor	r1, r1
 58a:	91 1d       	adc	r25, r1
 58c:	08 95       	ret

0000058e <_exit>:
 58e:	f8 94       	cli

00000590 <__stop_program>:
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stop_program>
