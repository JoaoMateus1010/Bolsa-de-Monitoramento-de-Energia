
CODIGO_BOLSA_2018_MONITORAMENTO_DE_ENERGIA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800116  00800116  00000628  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b23  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00001283  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000577  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048e  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000485  00000000  00000000  000026c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ADC>:
 * Instituição: UNIVERSIDADE FEDERAL DO CEARÁ
 * QUIXADÁ
 */
#include "ADC.h"
void init_ADC(){
	ADMUX  = 0b00000000;
  a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0b10000111;
  aa:	87 e8       	ldi	r24, 0x87	; 135
  ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADCSRB = 0b00000000;
  b0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  b4:	08 95       	ret

000000b6 <Read_ADC>:
}
unsigned int Read_ADC(unsigned int PIN_ADC_ANALOG){
	int Valor_da_leitura = 0;	
	ADMUX  = PIN_ADC_ANALOG;
  b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)){/*CONVERTENDO*/}
  c4:	80 81       	ld	r24, Z
  c6:	86 fd       	sbrc	r24, 6
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <Read_ADC+0xe>
	Valor_da_leitura = ADC;
  ca:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ce:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	return Valor_da_leitura;
}
  d2:	08 95       	ret

000000d4 <init_board>:
#include "DEFINES.h"
void init_board(void){
	/************************************************************************/
	/* DEFINIÇÃO PARA O TC1 PARA A LEITURA DO AD                            */
	/************************************************************************/
	TCCR1A = 0b00000001;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0b00000101;
  da:	95 e0       	ldi	r25, 0x05	; 5
  dc:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCCR1C = 0b00000000;
  e0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
	TIMSK1 = 0b00000001;
  e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	/************************************************************************/
	/* HABILITAR INTERRUPÇÕES DO SISTEMA                                    */
	/************************************************************************/
	SREG = 0b10000000;
  e8:	80 e8       	ldi	r24, 0x80	; 128
  ea:	8f bf       	out	0x3f, r24	; 63
  ec:	08 95       	ret

000000ee <main>:
#include "DEFINES.h"
unsigned char ByteRecebido;
unsigned long int Corrente_medida = 0;
unsigned int ADC_LIDO = 0;
int main(void){  
	init_board();
  ee:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_board>
	init_ADC();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ADC>
	init_USART();  
  f6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <init_USART>
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0xc>

000000fc <__vector_13>:
    while (TRUE){
		
    }
	return 0;
}
ISR(TIMER1_OVF_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	4f 93       	push	r20
 10c:	5f 93       	push	r21
 10e:	6f 93       	push	r22
 110:	7f 93       	push	r23
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	ADC_LIDO = Read_ADC(ADC3);
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 5b 00 	call	0xb6	; 0xb6 <Read_ADC>
 126:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 12a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
	Corrente_medida = ADC_LIDO;
	Corrente_medida /=11;
 12e:	bc 01       	movw	r22, r24
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e0       	ldi	r18, 0x0B	; 11
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	0e 94 8c 02 	call	0x518	; 0x518 <__udivmodsi4>
 140:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <Corrente_medida>
 144:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <Corrente_medida+0x1>
 148:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <Corrente_medida+0x2>
 14c:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <Corrente_medida+0x3>
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_18>:
ISR(USART_RX_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	4f 93       	push	r20
 182:	5f 93       	push	r21
 184:	6f 93       	push	r22
 186:	7f 93       	push	r23
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	bf 93       	push	r27
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	ByteRecebido = USART_Receive();
 194:	0e 94 fd 00 	call	0x1fa	; 0x1fa <USART_Receive>
 198:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <ByteRecebido>
	USART_printf_int(Corrente_medida);
 19c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Corrente_medida>
 1a0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <Corrente_medida+0x1>
 1a4:	0e 94 17 01 	call	0x22e	; 0x22e <USART_printf_int>
	USART_printfln(" FATOR * UNIDADE (A)");	
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 05 01 	call	0x20a	; 0x20a <USART_printfln>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <init_USART>:
void USART_printf(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
		USART_Transmit(String[i]);
	}
}
 1d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1d6:	87 e6       	ldi	r24, 0x67	; 103
 1d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1dc:	88 e9       	ldi	r24, 0x98	; 152
 1de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 1e2:	8e e0       	ldi	r24, 0x0E	; 14
 1e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 1e8:	08 95       	ret

000001ea <USART_Transmit>:
 1ea:	e0 ec       	ldi	r30, 0xC0	; 192
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	90 81       	ld	r25, Z
 1f0:	95 ff       	sbrs	r25, 5
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <USART_Transmit+0x4>
 1f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1f8:	08 95       	ret

000001fa <USART_Receive>:
 1fa:	e0 ec       	ldi	r30, 0xC0	; 192
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	88 23       	and	r24, r24
 202:	ec f7       	brge	.-6      	; 0x1fe <USART_Receive+0x4>
 204:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 208:	08 95       	ret

0000020a <USART_printfln>:
void USART_printfln(unsigned char *String){
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	ec 01       	movw	r28, r24
	int i=0;
	for(i=0;String[i]!=0;i++){
 210:	88 81       	ld	r24, Y
 212:	88 23       	and	r24, r24
 214:	31 f0       	breq	.+12     	; 0x222 <USART_printfln+0x18>
 216:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(String[i]);
 218:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
		USART_Transmit(String[i]);
	}
}
void USART_printfln(unsigned char *String){
	int i=0;
	for(i=0;String[i]!=0;i++){
 21c:	89 91       	ld	r24, Y+
 21e:	81 11       	cpse	r24, r1
 220:	fb cf       	rjmp	.-10     	; 0x218 <USART_printfln+0xe>
		USART_Transmit(String[i]);
	}
	USART_Transmit(0x0D);
 222:	8d e0       	ldi	r24, 0x0D	; 13
 224:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <USART_printf_int>:
void USART_printf_int(unsigned int Valor){
 22e:	ef 92       	push	r14
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
		switch(Valor){
 23c:	84 36       	cpi	r24, 0x64	; 100
 23e:	91 05       	cpc	r25, r1
 240:	20 f4       	brcc	.+8      	; 0x24a <USART_printf_int+0x1c>
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	91 05       	cpc	r25, r1
 246:	60 f0       	brcs	.+24     	; 0x260 <USART_printf_int+0x32>
 248:	58 c0       	rjmp	.+176    	; 0x2fa <USART_printf_int+0xcc>
 24a:	88 3e       	cpi	r24, 0xE8	; 232
 24c:	23 e0       	ldi	r18, 0x03	; 3
 24e:	92 07       	cpc	r25, r18
 250:	08 f4       	brcc	.+2      	; 0x254 <USART_printf_int+0x26>
 252:	a6 c0       	rjmp	.+332    	; 0x3a0 <USART_printf_int+0x172>
 254:	80 31       	cpi	r24, 0x10	; 16
 256:	37 e2       	ldi	r19, 0x27	; 39
 258:	93 07       	cpc	r25, r19
 25a:	08 f4       	brcc	.+2      	; 0x25e <USART_printf_int+0x30>
 25c:	fc c0       	rjmp	.+504    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 25e:	55 c1       	rjmp	.+682    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			case 0 ... 9:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 260:	9c 01       	movw	r18, r24
 262:	36 95       	lsr	r19
 264:	27 95       	ror	r18
 266:	36 95       	lsr	r19
 268:	27 95       	ror	r18
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
 26e:	a5 ec       	ldi	r26, 0xC5	; 197
 270:	b0 e2       	ldi	r27, 0x20	; 32
 272:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 276:	92 95       	swap	r25
 278:	82 95       	swap	r24
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	89 27       	eor	r24, r25
 27e:	9f 70       	andi	r25, 0x0F	; 15
 280:	89 27       	eor	r24, r25
 282:	48 ee       	ldi	r20, 0xE8	; 232
 284:	53 e0       	ldi	r21, 0x03	; 3
 286:	84 9f       	mul	r24, r20
 288:	90 01       	movw	r18, r0
 28a:	85 9f       	mul	r24, r21
 28c:	30 0d       	add	r19, r0
 28e:	94 9f       	mul	r25, r20
 290:	30 0d       	add	r19, r0
 292:	11 24       	eor	r1, r1
 294:	c2 1b       	sub	r28, r18
 296:	d3 0b       	sbc	r29, r19
 298:	9e 01       	movw	r18, r28
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	36 95       	lsr	r19
 2a0:	27 95       	ror	r18
 2a2:	ab e7       	ldi	r26, 0x7B	; 123
 2a4:	b4 e1       	ldi	r27, 0x14	; 20
 2a6:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	44 e6       	ldi	r20, 0x64	; 100
 2b0:	48 9f       	mul	r20, r24
 2b2:	90 01       	movw	r18, r0
 2b4:	49 9f       	mul	r20, r25
 2b6:	30 0d       	add	r19, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	c2 1b       	sub	r28, r18
 2bc:	d3 0b       	sbc	r29, r19
 2be:	9e 01       	movw	r18, r28
 2c0:	ad ec       	ldi	r26, 0xCD	; 205
 2c2:	bc ec       	ldi	r27, 0xCC	; 204
 2c4:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	96 95       	lsr	r25
 2ce:	87 95       	ror	r24
 2d0:	96 95       	lsr	r25
 2d2:	87 95       	ror	r24
 2d4:	9c 01       	movw	r18, r24
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	82 0f       	add	r24, r18
 2e8:	93 1f       	adc	r25, r19
 2ea:	9e 01       	movw	r18, r28
 2ec:	28 1b       	sub	r18, r24
 2ee:	39 0b       	sbc	r19, r25
 2f0:	c9 01       	movw	r24, r18
 2f2:	80 5d       	subi	r24, 0xD0	; 208
 2f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			break;
 2f8:	08 c1       	rjmp	.+528    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			case 10 ... 99:
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 2fa:	9c 01       	movw	r18, r24
 2fc:	36 95       	lsr	r19
 2fe:	27 95       	ror	r18
 300:	36 95       	lsr	r19
 302:	27 95       	ror	r18
 304:	36 95       	lsr	r19
 306:	27 95       	ror	r18
 308:	a5 ec       	ldi	r26, 0xC5	; 197
 30a:	b0 e2       	ldi	r27, 0x20	; 32
 30c:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 310:	92 95       	swap	r25
 312:	82 95       	swap	r24
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	89 27       	eor	r24, r25
 318:	9f 70       	andi	r25, 0x0F	; 15
 31a:	89 27       	eor	r24, r25
 31c:	48 ee       	ldi	r20, 0xE8	; 232
 31e:	53 e0       	ldi	r21, 0x03	; 3
 320:	84 9f       	mul	r24, r20
 322:	90 01       	movw	r18, r0
 324:	85 9f       	mul	r24, r21
 326:	30 0d       	add	r19, r0
 328:	94 9f       	mul	r25, r20
 32a:	30 0d       	add	r19, r0
 32c:	11 24       	eor	r1, r1
 32e:	c2 1b       	sub	r28, r18
 330:	d3 0b       	sbc	r29, r19
 332:	9e 01       	movw	r18, r28
 334:	36 95       	lsr	r19
 336:	27 95       	ror	r18
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	ab e7       	ldi	r26, 0x7B	; 123
 33e:	b4 e1       	ldi	r27, 0x14	; 20
 340:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 344:	8c 01       	movw	r16, r24
 346:	16 95       	lsr	r17
 348:	07 95       	ror	r16
 34a:	24 e6       	ldi	r18, 0x64	; 100
 34c:	20 9f       	mul	r18, r16
 34e:	c0 01       	movw	r24, r0
 350:	21 9f       	mul	r18, r17
 352:	90 0d       	add	r25, r0
 354:	11 24       	eor	r1, r1
 356:	8e 01       	movw	r16, r28
 358:	08 1b       	sub	r16, r24
 35a:	19 0b       	sbc	r17, r25
 35c:	98 01       	movw	r18, r16
 35e:	ad ec       	ldi	r26, 0xCD	; 205
 360:	bc ec       	ldi	r27, 0xCC	; 204
 362:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 366:	ec 01       	movw	r28, r24
 368:	d6 95       	lsr	r29
 36a:	c7 95       	ror	r28
 36c:	d6 95       	lsr	r29
 36e:	c7 95       	ror	r28
 370:	d6 95       	lsr	r29
 372:	c7 95       	ror	r28
 374:	8c 2f       	mov	r24, r28
 376:	80 5d       	subi	r24, 0xD0	; 208
 378:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 37c:	ce 01       	movw	r24, r28
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	cc 0f       	add	r28, r28
 384:	dd 1f       	adc	r29, r29
 386:	cc 0f       	add	r28, r28
 388:	dd 1f       	adc	r29, r29
 38a:	cc 0f       	add	r28, r28
 38c:	dd 1f       	adc	r29, r29
 38e:	c8 0f       	add	r28, r24
 390:	d9 1f       	adc	r29, r25
 392:	c8 01       	movw	r24, r16
 394:	8c 1b       	sub	r24, r28
 396:	9d 0b       	sbc	r25, r29
 398:	80 5d       	subi	r24, 0xD0	; 208
 39a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			break;
 39e:	b5 c0       	rjmp	.+362    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			
			case 100 ... 999:
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 3a0:	9c 01       	movw	r18, r24
 3a2:	36 95       	lsr	r19
 3a4:	27 95       	ror	r18
 3a6:	36 95       	lsr	r19
 3a8:	27 95       	ror	r18
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	a5 ec       	ldi	r26, 0xC5	; 197
 3b0:	b0 e2       	ldi	r27, 0x20	; 32
 3b2:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 3b6:	7c 01       	movw	r14, r24
 3b8:	f6 94       	lsr	r15
 3ba:	e7 94       	ror	r14
 3bc:	f6 94       	lsr	r15
 3be:	e7 94       	ror	r14
 3c0:	f6 94       	lsr	r15
 3c2:	e7 94       	ror	r14
 3c4:	f6 94       	lsr	r15
 3c6:	e7 94       	ror	r14
 3c8:	28 ee       	ldi	r18, 0xE8	; 232
 3ca:	33 e0       	ldi	r19, 0x03	; 3
 3cc:	e2 9e       	mul	r14, r18
 3ce:	c0 01       	movw	r24, r0
 3d0:	e3 9e       	mul	r14, r19
 3d2:	90 0d       	add	r25, r0
 3d4:	f2 9e       	mul	r15, r18
 3d6:	90 0d       	add	r25, r0
 3d8:	11 24       	eor	r1, r1
 3da:	7e 01       	movw	r14, r28
 3dc:	e8 1a       	sub	r14, r24
 3de:	f9 0a       	sbc	r15, r25
 3e0:	97 01       	movw	r18, r14
 3e2:	36 95       	lsr	r19
 3e4:	27 95       	ror	r18
 3e6:	36 95       	lsr	r19
 3e8:	27 95       	ror	r18
 3ea:	ab e7       	ldi	r26, 0x7B	; 123
 3ec:	b4 e1       	ldi	r27, 0x14	; 20
 3ee:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 3f2:	8c 01       	movw	r16, r24
 3f4:	16 95       	lsr	r17
 3f6:	07 95       	ror	r16
 3f8:	80 e3       	ldi	r24, 0x30	; 48
 3fa:	80 0f       	add	r24, r16
 3fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 400:	24 e6       	ldi	r18, 0x64	; 100
 402:	20 9f       	mul	r18, r16
 404:	c0 01       	movw	r24, r0
 406:	21 9f       	mul	r18, r17
 408:	90 0d       	add	r25, r0
 40a:	11 24       	eor	r1, r1
 40c:	e7 01       	movw	r28, r14
 40e:	c8 1b       	sub	r28, r24
 410:	d9 0b       	sbc	r29, r25
 412:	9e 01       	movw	r18, r28
 414:	ad ec       	ldi	r26, 0xCD	; 205
 416:	bc ec       	ldi	r27, 0xCC	; 204
 418:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 41c:	8c 01       	movw	r16, r24
 41e:	16 95       	lsr	r17
 420:	07 95       	ror	r16
 422:	16 95       	lsr	r17
 424:	07 95       	ror	r16
 426:	16 95       	lsr	r17
 428:	07 95       	ror	r16
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	80 0f       	add	r24, r16
 42e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 432:	c8 01       	movw	r24, r16
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	00 0f       	add	r16, r16
 43a:	11 1f       	adc	r17, r17
 43c:	00 0f       	add	r16, r16
 43e:	11 1f       	adc	r17, r17
 440:	00 0f       	add	r16, r16
 442:	11 1f       	adc	r17, r17
 444:	08 0f       	add	r16, r24
 446:	19 1f       	adc	r17, r25
 448:	ce 01       	movw	r24, r28
 44a:	80 1b       	sub	r24, r16
 44c:	91 0b       	sbc	r25, r17
 44e:	80 5d       	subi	r24, 0xD0	; 208
 450:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			break;
 454:	5a c0       	rjmp	.+180    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
			
			case 1000 ... 9999:
			USART_Transmit(Valor/1000 + '0');
 456:	9c 01       	movw	r18, r24
 458:	36 95       	lsr	r19
 45a:	27 95       	ror	r18
 45c:	36 95       	lsr	r19
 45e:	27 95       	ror	r18
 460:	36 95       	lsr	r19
 462:	27 95       	ror	r18
 464:	a5 ec       	ldi	r26, 0xC5	; 197
 466:	b0 e2       	ldi	r27, 0x20	; 32
 468:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 46c:	8c 01       	movw	r16, r24
 46e:	12 95       	swap	r17
 470:	02 95       	swap	r16
 472:	0f 70       	andi	r16, 0x0F	; 15
 474:	01 27       	eor	r16, r17
 476:	1f 70       	andi	r17, 0x0F	; 15
 478:	01 27       	eor	r16, r17
 47a:	80 e3       	ldi	r24, 0x30	; 48
 47c:	80 0f       	add	r24, r16
 47e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((Valor - (Valor/1000)*1000)/100 + '0');
 482:	28 ee       	ldi	r18, 0xE8	; 232
 484:	33 e0       	ldi	r19, 0x03	; 3
 486:	02 9f       	mul	r16, r18
 488:	c0 01       	movw	r24, r0
 48a:	03 9f       	mul	r16, r19
 48c:	90 0d       	add	r25, r0
 48e:	12 9f       	mul	r17, r18
 490:	90 0d       	add	r25, r0
 492:	11 24       	eor	r1, r1
 494:	c8 1b       	sub	r28, r24
 496:	d9 0b       	sbc	r29, r25
 498:	9e 01       	movw	r18, r28
 49a:	36 95       	lsr	r19
 49c:	27 95       	ror	r18
 49e:	36 95       	lsr	r19
 4a0:	27 95       	ror	r18
 4a2:	ab e7       	ldi	r26, 0x7B	; 123
 4a4:	b4 e1       	ldi	r27, 0x14	; 20
 4a6:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 4aa:	8c 01       	movw	r16, r24
 4ac:	16 95       	lsr	r17
 4ae:	07 95       	ror	r16
 4b0:	80 e3       	ldi	r24, 0x30	; 48
 4b2:	80 0f       	add	r24, r16
 4b4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)/10)+'0');
 4b8:	24 e6       	ldi	r18, 0x64	; 100
 4ba:	20 9f       	mul	r18, r16
 4bc:	c0 01       	movw	r24, r0
 4be:	21 9f       	mul	r18, r17
 4c0:	90 0d       	add	r25, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	c8 1b       	sub	r28, r24
 4c6:	d9 0b       	sbc	r29, r25
 4c8:	9e 01       	movw	r18, r28
 4ca:	ad ec       	ldi	r26, 0xCD	; 205
 4cc:	bc ec       	ldi	r27, 0xCC	; 204
 4ce:	0e 94 ae 02 	call	0x55c	; 0x55c <__umulhisi3>
 4d2:	8c 01       	movw	r16, r24
 4d4:	16 95       	lsr	r17
 4d6:	07 95       	ror	r16
 4d8:	16 95       	lsr	r17
 4da:	07 95       	ror	r16
 4dc:	16 95       	lsr	r17
 4de:	07 95       	ror	r16
 4e0:	80 e3       	ldi	r24, 0x30	; 48
 4e2:	80 0f       	add	r24, r16
 4e4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			USART_Transmit((((Valor -(1000*(Valor/1000)))%100)%10)+'0');
 4e8:	c8 01       	movw	r24, r16
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	00 0f       	add	r16, r16
 4f0:	11 1f       	adc	r17, r17
 4f2:	00 0f       	add	r16, r16
 4f4:	11 1f       	adc	r17, r17
 4f6:	00 0f       	add	r16, r16
 4f8:	11 1f       	adc	r17, r17
 4fa:	08 0f       	add	r16, r24
 4fc:	19 1f       	adc	r17, r25
 4fe:	ce 01       	movw	r24, r28
 500:	80 1b       	sub	r24, r16
 502:	91 0b       	sbc	r25, r17
 504:	80 5d       	subi	r24, 0xD0	; 208
 506:	0e 94 f5 00 	call	0x1ea	; 0x1ea <USART_Transmit>
			break;
		}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	08 95       	ret

00000518 <__udivmodsi4>:
 518:	a1 e2       	ldi	r26, 0x21	; 33
 51a:	1a 2e       	mov	r1, r26
 51c:	aa 1b       	sub	r26, r26
 51e:	bb 1b       	sub	r27, r27
 520:	fd 01       	movw	r30, r26
 522:	0d c0       	rjmp	.+26     	; 0x53e <__udivmodsi4_ep>

00000524 <__udivmodsi4_loop>:
 524:	aa 1f       	adc	r26, r26
 526:	bb 1f       	adc	r27, r27
 528:	ee 1f       	adc	r30, r30
 52a:	ff 1f       	adc	r31, r31
 52c:	a2 17       	cp	r26, r18
 52e:	b3 07       	cpc	r27, r19
 530:	e4 07       	cpc	r30, r20
 532:	f5 07       	cpc	r31, r21
 534:	20 f0       	brcs	.+8      	; 0x53e <__udivmodsi4_ep>
 536:	a2 1b       	sub	r26, r18
 538:	b3 0b       	sbc	r27, r19
 53a:	e4 0b       	sbc	r30, r20
 53c:	f5 0b       	sbc	r31, r21

0000053e <__udivmodsi4_ep>:
 53e:	66 1f       	adc	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	88 1f       	adc	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	1a 94       	dec	r1
 548:	69 f7       	brne	.-38     	; 0x524 <__udivmodsi4_loop>
 54a:	60 95       	com	r22
 54c:	70 95       	com	r23
 54e:	80 95       	com	r24
 550:	90 95       	com	r25
 552:	9b 01       	movw	r18, r22
 554:	ac 01       	movw	r20, r24
 556:	bd 01       	movw	r22, r26
 558:	cf 01       	movw	r24, r30
 55a:	08 95       	ret

0000055c <__umulhisi3>:
 55c:	a2 9f       	mul	r26, r18
 55e:	b0 01       	movw	r22, r0
 560:	b3 9f       	mul	r27, r19
 562:	c0 01       	movw	r24, r0
 564:	a3 9f       	mul	r26, r19
 566:	70 0d       	add	r23, r0
 568:	81 1d       	adc	r24, r1
 56a:	11 24       	eor	r1, r1
 56c:	91 1d       	adc	r25, r1
 56e:	b2 9f       	mul	r27, r18
 570:	70 0d       	add	r23, r0
 572:	81 1d       	adc	r24, r1
 574:	11 24       	eor	r1, r1
 576:	91 1d       	adc	r25, r1
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
